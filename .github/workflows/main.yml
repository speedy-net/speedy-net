name: GitHub Actions Speedy Net
on:
  - 'push'
jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu-20.04'
          - 'ubuntu-22.04'
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          # - 'pypy3.8'
          # - 'pypy3.9'
          # - 'pypy3.10'
        postgresql-version:
          - '13'
          - '14'
          - '15'
        is-main-or-staging:
          - ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' }}
        exclude:
          - os: 'ubuntu-20.04'
            postgresql-version: '14'
          - os: 'ubuntu-20.04'
            postgresql-version: '15'
          - os: 'ubuntu-22.04'
            postgresql-version: '13'
          - os: 'ubuntu-22.04'
            is-main-or-staging: false
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: cp env.ini.tests env.ini
      - run: pip install --upgrade -r requirements.txt -r tests-requirements.txt
      - run: pip freeze
      - run: pwd
      - run: lsb_release -a
      - run: |
          for version in 14 15 16 17 18
          do
            sudo apt-get -y --purge remove postgresql-$version postgresql-client-$version || true
            sudo pg_dropcluster $version main || true
          done
          docker stop $(docker ps -q --filter ancestor=postgres) || true
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install postgresql-${{ matrix.postgresql-version }} postgresql-client-${{ matrix.postgresql-version }}
          sudo sed -i 's/local   all             postgres                                peer/local   all             postgres                                trust/' /etc/postgresql/${{ matrix.postgresql-version }}/main/pg_hba.conf
          if [[ ${{ matrix.postgresql-version }} == 13 ]]; then
            sudo sed -i 's|host    all             all             127.0.0.1/32            md5|host    all             all             127.0.0.1/32            trust|' /etc/postgresql/${{ matrix.postgresql-version }}/main/pg_hba.conf
          else
            sudo sed -i 's|host    all             all             127.0.0.1/32            scram-sha-256|host    all             all             127.0.0.1/32            trust|' /etc/postgresql/${{ matrix.postgresql-version }}/main/pg_hba.conf
          fi
          sudo service postgresql start
        if: ${{ matrix.postgresql-version != 'latest' }}
      - run: pg_lsclusters
      - run: apt list --installed | grep postgresql
      - run: psql --version
      - run: |
          psql -c 'create user pguser;' -U postgres
          psql -c 'alter user pguser createdb; ' -U postgres
          psql -c "select version();" -U postgres
        env:
          PGHOST: 127.0.0.1
      - run: python --version
      - run: ./run_all_tests_with_all_warnings.sh
      - run: echo "üçè This job's status is ${{ job.status }}."
